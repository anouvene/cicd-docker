name: CI/CD workflow # Nom du workflow

env: # Définition des variables globales d'environnement
  SERVER_IP: '151.80.59.182'
  SERVER_USER: 'root'

concurrency: # Règle de gestion de la concurrence des jobs
  group: ${{ github.workflow }}-${{ github.ref }} # Regroupement des jobs par le nom du workflow et par la référence git (branche ou tag)
  cancel-in-progress: true # Règle qui annule les jobs en cours si un nouveau job est lancé

on: # Déclencheurs du worflow
  push: # Déclenchement sur un push
    branches: main # Seulement sur la branche main

jobs: # Différents jos du workflow

  # Premier job de vérification backend
  checks_backend: 
    runs-on: ubuntu-latest # Environnement d'exécution
    defaults: # Définition des valeurs par défaut pour les étapes
      run: # Les valeurs par défaut pour les étapes run
        working-directory: ./server # Dossier de travail ciblé

    steps: # Leds étapes du job "tests_backend"
      - name: Checkout le code # Récupération de code source
        uses: actions/checkout/@v4 # Utilisation de l'action checkout version 4

      - name: Installer nodeJS # Installation Node.js
        uses: actions/setup-node@v3 # Utilisation de l'action setup-node version 3
        with: # Avec la mise en cache des dépendances afin de réduire les accès réseau et accélèrer l’installation
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json # Chemin vers le fichier package-lock.jason pour le cache
      - name: Installer les dépendances
        run: npm ci --prefer-offline # Installer les dépendances listées dans package-lock.json avec une précision exacte des versions.
                                     #  --prefer-offline: npm utilise en priorité le cache local si les paquets y sont déjà disponibles 

      - name: Vérifier le code
        run: npm run lint # Utilisation de l'outil lint pour la vérification du code
      
      - name: Vérifier la vulnérabilité des dépendances
        run: npm audit # Utilisation de l'outil audit
      
      - name: Exécuter les tests # Lancement des tests unitaires
        run: npm run test:ci
      
      - name: Upload du rapport de couverture sur Codecov # Métrique de couverture des tests avec l'outil Codecov
        uses: codecov/codecov-action@v5
        with: 
          token: ${{ secrets.CODECOV_TOKEN }}

  # Job de vérifications sur le frontend
  checks_frontend:  
    runs-on: ubuntu-latest  # Environnement d'exécution

    steps:  # Étapes du job
      - name: Checkout le code  # Récupèrer le code source
        uses: actions/checkout@v4

      - name: Installer Node.js  # Installer Node.js
        uses: actions/setup-node@v3  # UUiliser l'action setup-node en version 3
        with:
          cache: 'npm'
          cache-dependency-path: client/package-lock.json  # Chemin vers le package-lock.json pour le cache

      - name: Installer les dépendances
        run: |
          cd client
          npm ci --prefer-offline

      - name: Vérifier les vulnérabilités dans les dépendances
        run: |
          cd client
          npm audit

      - name: Vérifier le code  # Vérifier le style du code avec lint
        run: |
          cd client
          npm run lint

  # Job pour construire le frontend
  build_frontend:  
    runs-on: ubuntu-latest  # Environnement d'exécution

    defaults:  # Définition des valeurs par défaut pour les étapes
      run:  # Définition des valeurs par défaut pour les étapes run
        working-directory: client  # Définir le dossier de travail par défaut pour les étapes run

    needs: [checks_frontend]  # Dépendre du job checks_frontend

    steps:  # Étapes du job
      - name: Checkout le code  # Récupèrer le code source
        uses: actions/checkout@v4

      - name: Installer Node.js
        uses: actions/setup-node@v3  # Utiliser l'action setup-node en version 3
        with:
          cache: 'npm'
          cache-dependency-path: client/package-lock.json  # Chemin vers le package-lock.json pour le cache

      - name: Installer les dépendances  # Installer les dépendances npm
        run: |
          npm ci --prefer-offline

      - name: Builder le frontend  # Construire le frontend
        run: |
          npm run build

      - name: Archiver les artefacts  # Archiver le dossier 'dist' pour une utilisation ultérieure
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist   # Nom de l'artéfact
          path: client/dist/    # Chemin de l'artéfact
          retention-days: 1     # Durée de rétention de l'artéfact             
  
  # Job pour construire l'environnement de test e2e
  build_frontend_e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client

    needs: [checks_frontend]

    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Installer les dépendances
        run: |
          npm ci --prefer-offline

      - name: Builder le frontend
        run: |
          npm run build:e2e

      - name: archiver les artefacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-e2e
          path: client/dist/
          retention-days: 1
  
  # Job de test e2e
  test_e2e:
    runs-on: ubuntu-latest

    needs: [build_frontend_e2e]

    strategy:
      matrix:
        browser: ["chrome", "firefox", "edge"]

    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Récupérer l'artéfact du frontend pour les tests e2e
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-e2e
          path: ./client/dist

      - name: Installer les dépendances serveur
        run: |
          cd server
          npm ci --prefer-offline

      - name: Lancer le serveur backend
        run: |
          cd server
          node index.js &

      - name: Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          browser: ${{ matrix.browser }}
          start: npm run preview
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173
          
      # pour ne pas uploader 3 fois le rapport
      - name: Upload du rapport de couverture sur Codecov
        if: matrix.browser == 'chrome' 
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}          

  # Job pour le déploiement
  deploy:
    needs: [checks_backend, build_frontend, test_e2e] # Dépendre des jobs précédents
    runs-on: ubuntu-latest 

    steps:
      - name: checkout le code # Récupèrer le code source
        uses: actions/checkout@v4 # Utiliser l'action de checkout

      - name: Télécharger l'artefact du frontend # Artéfact dist archivé précédemment
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./dist

      - name: Déployer sur le serveur # Étape de déploiement et de màj éventuelles sur le server
        run: | # Commandes shell à exécuter
          eval $(ssh-agent -s)  # Initialise l'agent SSH
          ssh-add - <<< "${{ secrets.SSH_KEY_VPS }}"  # Ajoute la clé SSH privée
          mkdir -p ~/.ssh  # Créer le dossier .ssh si nécessaire
          ssh-keyscan -p 2704 -H $SERVER_IP >> ~/.ssh/known_hosts # Ajoute la clé publique connue dans le fichier known_hosts
          scp -r -P 2704  ./dist $SERVER_USER@$SERVER_IP:/var/www/realisations/dyma_cicd  # Copie le répertoire dist du frontend sur le serveur
          scp -r -P 2704  ./server $SERVER_USER@$SERVER_IP:/var/www/realisations/dyma_cicd  # Copie le répertoire server du backend sur le serveur
          ssh -p 2704 $SERVER_USER@$SERVER_IP "cd /var/www/realisations/dyma_cicd/server && sudo npm install --omit=dev"  # Installe les dépendances sur le serveur
          ssh -p 2704 $SERVER_USER@$SERVER_IP "cd /var/www/realisations/dyma_cicd/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"  # Démarre ou redémarre le service avec pm2
